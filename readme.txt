
=== BASIC USAGE ==================================================================

There are two modes of operation. In the default mode, user:pass pairs are read
from an input file and checked against a series of rules defined in a rules
file. You can use this mode with:

    java Cracker in=passwd out=cracked.txt

Both the 'in' and 'out' arguments are optional. There are three other (optional)
arguments, shown below, that specify the rules file path, error log path, and
hashing algorithm to be used.

    java Cracker rules=rules.conf error=crash.log alg=SHA-256

The expected format of the input file is:

    username:password_hash[:anything_else_here]


=== GENERATOR TOOLS ==============================================================

The second mode of operation is generation mode, which is a convenience tool for
creating filtered word lists. The filter command creates a new word list from an
existing one based on a filter. For example, the below command creates a new list
with only 5-character words that contain 'a' or 'l'.

    java Cracker filter /usr/share/dict/words len=5 has=al > new-words.txt

The replace command creates a new word list according to certain substitution
rules. For example, if words.txt contains the word 'leviathan', then the command

    java Cracker replace words.txt a@ l1 > substituted.txt

will output the following:

    1eviathan
    levi@than
    leviath@n
    1evi@than
    levi@th@n
    1eviath@n
    1evi@th@n


=== RULES FILE ==================================================================

Each line of the rules file designates an independent rule that will be applied
to the input data. Each rule can consist of one or more commands separated by '|'
to form a pipeline. Possible passwords are lazily generated by the first command
in a rule and are passed along to the following commands. Lines beginning with
'#' are considered comments and are not parsed by the program.

There are three defined 'generator' commands that can appear at the beginning of
a rule, shown below:

    read "path/to/file"         # reads lines from a file
    X to Y digits               # generates numbers between X and Y digits
    permute "ABC"               # outputs all permutations of a string, e.g.
                                # {A, B, C, AB, AC, BA, BC, CA, CB, ABC, ...}

There are two defined commands that must occur after the first command in a
rule, outlined below:

    add capitalized             # includes lowercase and capitalized forms
    add X digit(s)              # appends X digits to a password

The combination of these configurable rules and the built-in generator tools
should give users a wide range of possibilities.